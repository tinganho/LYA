// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace Lya {
namespace protos {

class LyaService final {
 public:
  static constexpr char const* service_full_name() {
    return "Lya.protos.LyaService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status extract(::grpc::ClientContext* context, const ::Lya::protos::PBExtractRequest& request, ::Lya::protos::PBExtractResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBExtractResponse>> Asyncextract(::grpc::ClientContext* context, const ::Lya::protos::PBExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBExtractResponse>>(AsyncextractRaw(context, request, cq));
    }
    virtual ::grpc::Status compile(::grpc::ClientContext* context, const ::Lya::protos::PBCompileRequest& request, ::Lya::protos::PBCompileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBCompileResponse>> Asynccompile(::grpc::ClientContext* context, const ::Lya::protos::PBCompileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBCompileResponse>>(AsynccompileRaw(context, request, cq));
    }
    virtual ::grpc::Status check_availability(::grpc::ClientContext* context, const ::Lya::protos::PBAvailabilityRequest& request, ::Lya::protos::PBAvailabilityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBAvailabilityResponse>> Asynccheck_availability(::grpc::ClientContext* context, const ::Lya::protos::PBAvailabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBAvailabilityResponse>>(Asynccheck_availabilityRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBExtractResponse>* AsyncextractRaw(::grpc::ClientContext* context, const ::Lya::protos::PBExtractRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBCompileResponse>* AsynccompileRaw(::grpc::ClientContext* context, const ::Lya::protos::PBCompileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Lya::protos::PBAvailabilityResponse>* Asynccheck_availabilityRaw(::grpc::ClientContext* context, const ::Lya::protos::PBAvailabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status extract(::grpc::ClientContext* context, const ::Lya::protos::PBExtractRequest& request, ::Lya::protos::PBExtractResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBExtractResponse>> Asyncextract(::grpc::ClientContext* context, const ::Lya::protos::PBExtractRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBExtractResponse>>(AsyncextractRaw(context, request, cq));
    }
    ::grpc::Status compile(::grpc::ClientContext* context, const ::Lya::protos::PBCompileRequest& request, ::Lya::protos::PBCompileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBCompileResponse>> Asynccompile(::grpc::ClientContext* context, const ::Lya::protos::PBCompileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBCompileResponse>>(AsynccompileRaw(context, request, cq));
    }
    ::grpc::Status check_availability(::grpc::ClientContext* context, const ::Lya::protos::PBAvailabilityRequest& request, ::Lya::protos::PBAvailabilityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBAvailabilityResponse>> Asynccheck_availability(::grpc::ClientContext* context, const ::Lya::protos::PBAvailabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBAvailabilityResponse>>(Asynccheck_availabilityRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBExtractResponse>* AsyncextractRaw(::grpc::ClientContext* context, const ::Lya::protos::PBExtractRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBCompileResponse>* AsynccompileRaw(::grpc::ClientContext* context, const ::Lya::protos::PBCompileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Lya::protos::PBAvailabilityResponse>* Asynccheck_availabilityRaw(::grpc::ClientContext* context, const ::Lya::protos::PBAvailabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_extract_;
    const ::grpc::RpcMethod rpcmethod_compile_;
    const ::grpc::RpcMethod rpcmethod_check_availability_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status extract(::grpc::ServerContext* context, const ::Lya::protos::PBExtractRequest* request, ::Lya::protos::PBExtractResponse* response);
    virtual ::grpc::Status compile(::grpc::ServerContext* context, const ::Lya::protos::PBCompileRequest* request, ::Lya::protos::PBCompileResponse* response);
    virtual ::grpc::Status check_availability(::grpc::ServerContext* context, const ::Lya::protos::PBAvailabilityRequest* request, ::Lya::protos::PBAvailabilityResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_extract() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* context, const ::Lya::protos::PBExtractRequest* request, ::Lya::protos::PBExtractResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestextract(::grpc::ServerContext* context, ::Lya::protos::PBExtractRequest* request, ::grpc::ServerAsyncResponseWriter< ::Lya::protos::PBExtractResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_compile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status compile(::grpc::ServerContext* context, const ::Lya::protos::PBCompileRequest* request, ::Lya::protos::PBCompileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcompile(::grpc::ServerContext* context, ::Lya::protos::PBCompileRequest* request, ::grpc::ServerAsyncResponseWriter< ::Lya::protos::PBCompileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_check_availability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_check_availability() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_check_availability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_availability(::grpc::ServerContext* context, const ::Lya::protos::PBAvailabilityRequest* request, ::Lya::protos::PBAvailabilityResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck_availability(::grpc::ServerContext* context, ::Lya::protos::PBAvailabilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::Lya::protos::PBAvailabilityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_extract<WithAsyncMethod_compile<WithAsyncMethod_check_availability<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_extract() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status extract(::grpc::ServerContext* context, const ::Lya::protos::PBExtractRequest* request, ::Lya::protos::PBExtractResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_compile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status compile(::grpc::ServerContext* context, const ::Lya::protos::PBCompileRequest* request, ::Lya::protos::PBCompileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_check_availability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_check_availability() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_check_availability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_availability(::grpc::ServerContext* context, const ::Lya::protos::PBAvailabilityRequest* request, ::Lya::protos::PBAvailabilityResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_extract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_extract() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::Lya::protos::PBExtractRequest, ::Lya::protos::PBExtractResponse>(std::bind(&WithStreamedUnaryMethod_extract<BaseClass>::Streamedextract, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_extract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status extract(::grpc::ServerContext* context, const ::Lya::protos::PBExtractRequest* request, ::Lya::protos::PBExtractResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedextract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Lya::protos::PBExtractRequest,::Lya::protos::PBExtractResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_compile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_compile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::Lya::protos::PBCompileRequest, ::Lya::protos::PBCompileResponse>(std::bind(&WithStreamedUnaryMethod_compile<BaseClass>::Streamedcompile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_compile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status compile(::grpc::ServerContext* context, const ::Lya::protos::PBCompileRequest* request, ::Lya::protos::PBCompileResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcompile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Lya::protos::PBCompileRequest,::Lya::protos::PBCompileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_check_availability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_check_availability() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::Lya::protos::PBAvailabilityRequest, ::Lya::protos::PBAvailabilityResponse>(std::bind(&WithStreamedUnaryMethod_check_availability<BaseClass>::Streamedcheck_availability, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_check_availability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status check_availability(::grpc::ServerContext* context, const ::Lya::protos::PBAvailabilityRequest* request, ::Lya::protos::PBAvailabilityResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcheck_availability(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Lya::protos::PBAvailabilityRequest,::Lya::protos::PBAvailabilityResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_extract<WithStreamedUnaryMethod_compile<WithStreamedUnaryMethod_check_availability<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_extract<WithStreamedUnaryMethod_compile<WithStreamedUnaryMethod_check_availability<Service > > > StreamedService;
};

}  // namespace protos
}  // namespace Lya


#endif  // GRPC_service_2eproto__INCLUDED
